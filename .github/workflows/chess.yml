name: Chess Workflow

on:
  issue_comment:
    types: [created]

jobs:
  Make-a-move:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get chess move notation from comment
        run: |
          echo "COMMENT_BODY=${{ github.event.comment.body }}" >> $GITHUB_ENV
          echo "${{ github.event.comment.user.login }} wants to move ${{ github.event.comment.body }}"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
          cache: "pip"

      - name: Generate Chessboard Image
        run: |
          # Install dependencies
          pip install -r scripts/requirements.txt

          # delete all other chessboard images
          rm chessboard*.png

          # generate new chessboard image and export .env variables
          python scripts/export_chessboard.py $COMMENT_BODY @${{ github.event.comment.user.login }} ${{ github.event.issue.number }}

          # export environment variables from .env file
          while IFS= read -r line; do
            echo "$line" >> $GITHUB_ENV
          done < <(grep -v '^#' .env)

          # Check for MOVE_STATUS and exit if it's "invalid"
          if [ "$MOVE_STATUS" = "invalid" ]; then
            echo "Move is invalid, but continuing with the next steps."
            exit 1
          fi

          # rename file to chessboard.png + timestamp
          TIMESTAMP=-$(date +%s)
          mv images/chessboard.png images/chessboard$TIMESTAMP.png 

          # update image link in readme
          sed -i "s|\(https://raw.githubusercontent.com/thieleju/thieleju/main/images/chessboard\)[^\" ]*|\1$TIMESTAMP.png|g" README.md

          # add Filename to github_env
          echo "CHESSBOARD_FILENAME=chessboard$TIMESTAMP.png" >> $GITHUB_ENV

      - name: Update issue
        if: ${{ env.MOVE_STATUS == 'valid' }}
        uses: actions/github-script@v7
        with:
          script: |
            const moveHistory = "${{ env.GAME_HISTORY }}".replace(/\.\s/g, ".&nbsp&nbsp").replace(/\|/g, "<br>")
            let validMovesCount = "${{ env.VALID_MOVES }}".split(", ").length
            if (validMovesCount === 0) validMovesCount = 1 # if only one legal move
            const issueBody = `
            ### Comment on this issue to make a move! It's ${{ env.WHICH_TURN }}'s turn to move.
            > Move has to be in Standard Algebraic Notation ([SAN](https://www.chess.com/terms/chess-notation)) (e4, Bf4, exd5, Qxf7+, ...) <br>

            <div>
            <img src="https://raw.githubusercontent.com/thieleju/thieleju/main/${{ env.CHESSBOARD_FILENAME }}" \>
            </div>

            ### There are ${ validMovesCount } valid moves for ${{ env.WHICH_TURN }}:
            > ${{ env.VALID_MOVES }}

            <details>
              <summary>Show Move History</summary><br>
              <div>
              <img width="350" src="https://raw.githubusercontent.com/thieleju/thieleju/main/games/game${{ env.GAME_NUMBER }}/game.gif" \>
              </div>
              ${moveHistory}
            </details>
            `
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: issueBody
            })

      - name: Update readme link and commit changes
        if: ${{ env.MOVE_STATUS == 'valid' }}
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          git add .
          git commit -m "ðŸš€ Update chessboard image, fen and readme"
          git push origin HEAD

      - name: React to issue comment
        uses: actions/github-script@v7
        with:
          script: |
            if ("${{ env.MOVE_STATUS }}" == 'valid') {
              await github.rest.reactions.createForIssueComment({
                comment_id: "${{ github.event.comment.id }}",
                owner: context.repo.owner,
                repo: context.repo.repo,
                content: '+1'
              })
            } else {
              await github.rest.reactions.createForIssueComment({
                comment_id: "${{ github.event.comment.id }}",
                owner: context.repo.owner,
                repo: context.repo.repo,
                content: 'confused'
              })
            }
